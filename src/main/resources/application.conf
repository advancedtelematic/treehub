akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  http.server = {
    parsing.max-content-length = 3GB
    parsing.max-content-length = ${?AKKA_HTTP_MAX_CONTENT_LENGTH}
    request-timeout = 5 minutes
    request-timeout = ${?AKKA_HTTP_REQUEST_TIMEOUT}
    idle-timeout = 5 minutes
    idle-timeout = ${?AKKA_HTTP_IDLE_TIMEOUT}
    max-connections = 1024
    max-connections = ${?AKKA_HTTP_MAX_CONNECTIONS}
  }

  actor.deployment {
    "/usage-router/*" {
      dispatcher = blocking-io-dispatcher
    }
  }
}

blocking-io-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 32
  }
  throughput = 1
}

database = {
  driver = "org.mariadb.jdbc.Driver"
  url = "jdbc:mariadb://localhost:3306/ota_treehub"
  url = ${?DB_URL}
  properties {
    user = "treehub"
    user = ${?DB_USER}
    password = "treehub"
    password = ${?DB_PASSWORD}
  }
  numThreads = 20
  numThreads = ${?DB_NUM_THREADS}
  queueSize = 1000
  queueSize = ${?DB_QUEUE_SIZE}
  migrate = false
  migrate = ${?DB_MIGRATE}
  registerMbeans = true
}

server = {
  host = "0.0.0.0"
  host = ${?BIND_HOST}
  port = 8084
  port = ${?BIND_PORT}
  treehubUri = "http://"${server.host}":"${server.port}
  treehubUri = ${?TREEHUB_HOSTNAME}
}

treehub {
  storage {
    type = "s3" // or local
    type = ${?TREEHUB_STORAGE}

    staleObjectsExpireAfter = 1 hour
    staleObjectsExpireAfter = ${?TREEHUB_STALE_OBJECTS_EXPIRE_AFTER}

    local = {
      path = "/tmp/treehub"
      path = ${?TREEHUB_LOCAL_STORE_PATH}
    }

    s3 = {
      accessKey = ${?TREEHUB_AWS_ACCESS_KEY}
      secretKey = ${?TREEHUB_AWS_SECRET_KEY}
      bucketId = ${?TREEHUB_AWS_BUCKET_ID}
      deltasBucketId = ${?DELTAS_AWS_BUCKET_ID}
      region = "eu-central-1"
      region = ${?TREEHUB_AWS_REGION}
      allowRedirects = false
      allowRedirects = ${?TREEHUB_REDIRECT_DOWNLOADS}
      endpointUrl = ${?TREEHUB_S3_ENDPOINTURL}
    }
  }
}

core = {
  host = "localhost"
  host = ${?SOTA_CORE_HOST}
  port = 8080
  port = ${?SOTA_CORE_PORT}
  baseUri = "http://"${core.host}":"${core.port}
  packagesApi = ${core.baseUri}"/api/v1/packages"
}

device_registry = {
  host = "localhost"
  host = ${?DEVICE_REGISTRY_HOST}
  port = 8083
  port = ${?DEVICE_REGISTRY_PORT}
  baseUri = "http://"${device_registry.host}":"${device_registry.port}
  devicesUri = ${device_registry.baseUri}"/api/v1/devices"
  deviceGroupsUri = ${device_registry.baseUri}"/api/v1/device_groups"
  mydeviceUri = ${device_registry.baseUri}"/api/v1/mydevice"
  packagesUri = ${device_registry.baseUri}"/api/v1/device_packages"
}

auth {
  protocol = "oauth.accesstoken" # or none
  protocol = ${?AUTH_PROTOCOL}
  verification = "local" # three options: none, local, auth-plus
  verification = ${?AUTH_VERIFICATION}
  token {
    secret = "AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow"
    secret = ${?JWT_SECRET}
  }
}

authplus {
  api.host = "localhost"
  api.host = ${?AUTH_PLUS_HOST}
  api.port = 9001
  api.port = ${?AUTH_PLUS_PORT}
  api.scheme = "http"
  api.scheme = ${?AUTH_PLUS_SCHEME}
  api.uri = ${authplus.api.scheme}"://"${authplus.api.host}":"${authplus.api.port}
  client{
    id = ""
    id = ${?AUTHPLUS_CLIENT_ID}
    secret = ""
    secret = ${?AUTHPLUS_CLIENT_SECRET}
  }
}

messaging {
  kafka {
    groupIdPrefix = "treehub"
    groupIdPrefix = ${?KAFKA_GROUP_ID}
    topicSuffix = "dev"
    topicSuffix = ${?KAFKA_TOPIC_SUFFIX}
    host = "localhost:9092"
    host = ${?KAFKA_HOST}
  }
}

ats {
  metricsReporter {
    reportMetrics = true
    reportMetrics = ${?REPORT_METRICS}
    serviceName=treehub
    serviceName=${?SERVICE_NAME}
    instanceId=${ats.metricsReporter.serviceName}
    instanceId=${?MESOS_TASK_ID}
  }
}
